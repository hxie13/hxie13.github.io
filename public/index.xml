<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>译码为梦</title>
    <link>https://hxie13.github.io/public/</link>
    <description>Recent content on 译码为梦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; BSD license</copyright>
    <lastBuildDate>Fri, 25 Feb 2022 19:36:11 +0800</lastBuildDate><atom:link href="https://hxie13.github.io/public/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TimeLine</title>
      <link>https://hxie13.github.io/public/posts/timeline/</link>
      <pubDate>Fri, 25 Feb 2022 19:36:11 +0800</pubDate>
      
      <guid>https://hxie13.github.io/public/posts/timeline/</guid>
      <description>各公司招聘deadline信息汇总    单位 岗位类型 截止时间 面向对象     字节跳动 暑期实习 4.30之前 23年8月之前   蔚来 春季补招     TPLINK  3.31 22年12月31日之前   易方达基金 暑期实习 3.31 23年8月之前   宁德时代 计算岗专项 2.18起投 22年12月之前   Oppo 春季招聘 4月截止 22届博士   海康威视 春季招聘 4.15截止 博士   华为中央软件院 中央软件院  22年12月31日之前    </description>
    </item>
    
    <item>
      <title>软件工具的使用手册</title>
      <link>https://hxie13.github.io/public/posts/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</link>
      <pubDate>Wed, 23 Feb 2022 15:07:55 +0800</pubDate>
      
      <guid>https://hxie13.github.io/public/posts/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</guid>
      <description>VSCODE常用路径(文件)变量  ${workspaceFolder}，当前工程文件夹路径 ${workspaceFolderBasename}，当前工程文件夹名称 ${file}，包含绝对路径的文件名 ${relativeFileDirname}，相对于当前工程文件夹的路径名 ${relativeFile}，包含相对路径的文件名 ${fileDirname}，当前打开文件的路径名(绝对路径)  CMAKE常用命令及变量 </description>
    </item>
    
    <item>
      <title>面试经验</title>
      <link>https://hxie13.github.io/public/posts/expinterview/</link>
      <pubDate>Tue, 15 Feb 2022 14:32:03 +0800</pubDate>
      
      <guid>https://hxie13.github.io/public/posts/expinterview/</guid>
      <description>知识点归纳 LeetCode   LC.61 ：给定一个单链表，输出该链表右移k位的新链表
  LC.215 ：给定一个数组，输出数组里第k大的数字
  用两个栈(Stack)实现一个队列(Queue)的入队(Enqueue)与出队(Dequeue)方法. 解析   基础知识 C++  静态链接和动态链接  static作用  大端字节序和小段字节序 c++之多态性  const和#define c++模板在汇编阶段还是运行阶段 数组和链表的区别 智能指针的底层实现   计算机网络  三次握手，四次挥手  为什么要三次握手，两次不行吗？  防止因失效的连接请求报文而出现重复连接，举个例子，若初次发出的请求连接报文因为网络拥堵而迟迟未到达接收端，如此客户端便不会接受到ACK报文，可能认定服务器未收到SYN报文，于是再发送一条请求连接报文，此次连接顺利建立，传输数据，最后关闭连接；若是两次握手，当初次的请求连接报文到达服务端时，服务端进入ESTABLISHED状态，返回确认应答给客户端，客户端也进入ESTABLISHED状态，连接被重复建立，造成网络资源浪费，而三次握手规则下，当客户端收到重复确认应答后，识别出该应答为历史应答，便不会进入ESTABLISHED状态了，同样也不会建立新的连接了，接着通过发送RST报文通知服务端终止连接.     TCP/IP头部 HTTP、HTTPS加密原理 以及HTTP完整的传输过程  子网掩码 浏览器输入URL后发生了什么  域名解析-&amp;gt;IP地址  浏览器解析该域名，首先查看本地hosts文件，看其中有没有请求域名所对应的IP地址缓存，若有则直接使用hosts文件中的IP地址； 若hosts文件中未寻找到对应IP地址，浏览器向本地DNS服务器(ISP，例如中国电信)发起域名-&amp;gt;IP地址的递归查询请求，若本地DNS服务器无该缓存，转向DNS根服务器进行查询； 根DNS服务器未记录具体域名和IP地址的对应关系，而是返回给本地DNS服务器查询地址对应的域名服务器地址，该过程是迭代的过程； 本地DNS继续向域名服务器(.com)发出请求，但域名服务器同样未记录具体域名和IP地址的对应关系，但会返回给本地DNS服务器查询地址对应的域名解析服务器地址； 最后，本地DNS服务器向域名解析服务器发出请求，收到一个域名与IP地址的对应关系，本地DNS服务器在将IP地址返回给用户电脑的同时，将该对应关系缓存起来以备其它用户查询，加快网络访问.   建立TCP连接(向web服务器80端口发起TCP连接请求)； 浏览器向web服务器发起http请求； 服务器端处理，返回http响应； 关闭TCP连接 浏览器解析资源，布局渲染.    数据库  查找表student中分数在90-100之间的学生信息  操作系统  进程、线程的特点 线程同步 锁 如何实现共享内存  </description>
    </item>
    
    <item>
      <title>Modern Operating Systems, Fourth Edition</title>
      <link>https://hxie13.github.io/public/posts/os/</link>
      <pubDate>Mon, 14 Feb 2022 20:46:30 +0800</pubDate>
      
      <guid>https://hxie13.github.io/public/posts/os/</guid>
      <description>1. 绪论 计算机为管理物理部件并加以优化使用而安装的一层软件，称为操作系统.
  用户态 浏览器 音乐播放器 电子邮件 软件   用户接口程序   内核态 操作系统     硬件    用户接口程序包括：shell(基于文本)、GUI(基于图形用户界面). 计算机有两种运行模式：内核态和用户态，软件中最基础的部分是操作系统，其运行在内核态，可以执行任何机器指令，对所有硬件拥有完全访问权；用户态下的软件仅使用了机器指令中的一个子集，无法使用那些会影响机器控制或可进行I/O操作的指令. 但在一些系统中，用户态下运行的程序会协助操作系统完成特权功能，但该程序不是操作系统的一部分，也不在内核态下运行. Linux参考UNIX模式编写，但具有全新的代码基础.  1.1 操作系统的功能 操作系统是运行在内核态的软件，有两个基本上独立的任务，为程序员提供一个资源集的清晰抽象，并管理这些硬件资源。
1.1.1 作为扩展机器的操作系统 一种自顶向下的观点，操作系统是向应用程序提供基本抽象的概念.
 硬盘驱动：实现软件与硬件的交互，提供读写硬盘块的接口. 抽象：将任务划分为两部分，有关抽象的定义和实现；随时用这些抽象解决问题. 通过操作系统，隐藏硬件，对外呈现出良好、清晰、优雅、一致的接口.  1.1.2 作为资源管理者的操作系统 一种自底向上的观点，操作系统管理着一个复杂系统的各个部分，其任务在于在相互竞争的程序之间有序控制对处理器、存储器以及其它I/O接口设备的分配.
 例如：多个应用程序试图在同一台打印机上输出计算结果，使用磁盘上缓存区的方法，操作系统接受多个程序的输出，在一个程序输出结束后，有序打印暂存于缓存区的文件.  当一个计算机有多个用户时，管理和保护存储器、I/O接口设备以及其它资源的需求变得强烈起来，因为用户间可能会相互干扰。在这个角度出发看待操作系统，其任务就是记录哪个程序在使用什么资源，对资源请求进行分配，评估使用代价，并且为不同程序和用户调节相互冲突的资源请求.
  资源管理的方式：时间和空间上的多路复用(共享)资源机制. 时间上的复用(打印机及CPU等资源的使用). 空间上的复用(在若干个运行程序之间分割内存，特别是当一个程序只需要整个内存的一小部分时;磁盘为不同用户保存文件).  几个重要概念
 批处理系统 多道程序设计 分时系统 IEEE提出一个UNIX标准，称为POSIX，凡是UNIX必须支持的小型系统调用接口.  1.3 计算机硬件  处理器：CPU从内存中取出指令并执行，顺序是，取指，解码，执行.  每个CPU都有一套可执行的专门指令集，x86处理器不能执行ARM程序。由于访问内存以得到指令或数据的时间比执行指令花费时间更长，CPU内部有一些保存关键变量和临时数据的寄存器.
 除了保存变量和临时结果的通用寄存器外，还有一些对程序员可见的专用寄存器，例如，
 程序计数器，用以保存将要取出的下一条指令的内存地址，在指令取出后被更新以指向后继的指令.</description>
    </item>
    
    <item>
      <title>TutorialHugo</title>
      <link>https://hxie13.github.io/public/posts/tutorialhugo/</link>
      <pubDate>Mon, 14 Feb 2022 10:24:26 +0800</pubDate>
      
      <guid>https://hxie13.github.io/public/posts/tutorialhugo/</guid>
      <description>目录功能介绍 Archetypes 目录 静态源码文件以section组织，每个section使用相应同名的archetypes，以.md内容自动响应填充meta data. 例如hugo new posts\demo.md，hugo会按以下顺序在archetypes目录下搜索posts.md文件，寻找到哪个文件则使用哪个文件内容作为模板.
 archetypes\posts.md archetypes\default.md themes\themename\archetypes\posts.md themes\themename\archetypes\default.md  Public 目录 静态网页的输出目录</description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://hxie13.github.io/public/posts/tcp/</link>
      <pubDate>Sun, 13 Feb 2022 15:53:17 +0800</pubDate>
      
      <guid>https://hxie13.github.io/public/posts/tcp/</guid>
      <description>TCP/IP协议族 TCP四层网络结构  数据链路层，实现网卡接口的网络驱动程序.(ARP与RARP协议) 网络层，实现源端与接收端中间结点(路由器)的选择，以确定主机间路径.(IP协议)  网络层另一重要协议是ICMP协议，主要用于检测网络连接.   传输层，提供两台主机上端到端的通信.(TCP协议、UDP协议、SCTP流控制传输协议) 应用层，负责处理应用程序的逻辑.(telnet、OSPF开放最短路径优先、DNS协议)  封装  数据经TCP封装后，称为TCP报文段(TCP头部信息+TCP内核缓冲区). 经UDP封装后的数据称为UDP数据报,不为应用层数据保存副本. 经IP封装后的数据称为IP数据报，包含头部信息和数据部分(可能为TCP报文段、UDP数据报、ICMP报文). 经数据链路层封装的数据称为帧(frame).帧的最大传输单元(MTU)受网络类型的限制，过长的IP数据报可能需要分片传输. 帧与传输网络类型相关，有以太网帧、令牌环帧.  分用 帧到达目的主机时，将沿协议栈自底向上依次传递. IP协议、ARP、RARP都依赖帧传输数据，所以帧头部需要提供字段来区分.其它层为区分上层协议，也需要采用不同的标识手段：
 帧头部的类型字段&amp;mdash;&amp;gt; IP头部的协议字段&amp;mdash;&amp;gt; TCP/UDP的端口号.  IP协议 IPv4是指32位IP地址协议，目前快使用完了，另有IPv6协议.
 IP协议为上层协议提供无状态、无连接、不可靠的服务.需要上层协议自己实现数据确认、超时重传等机制达到可靠传输的目的.  因特网 具体构成描述  网络边缘上的不同端系统通过通信链路和分组交换机(由ISP提供)接入因特网。  通信链路由不同类型的物理媒体组成，包括有同轴电缆、铜线、光纤和无线电频谱，数据在链路中的传输速率以比特/秒(bit/s,或bps)来度量。 分组交换机主要有链路层交换机和路由器，前者通常用于接入网中，而路由器用于网络核心中。 端系统之间的数据传输以分组(packet)的形式进行，数据分段，每段加上首部字节便是一个分组。 IP协议定义了在路由器和端系统之间发送和接受的分组格式。    </description>
    </item>
    
    <item>
      <title>GitLearn</title>
      <link>https://hxie13.github.io/public/posts/gitlearn/</link>
      <pubDate>Sun, 13 Feb 2022 13:30:44 +0800</pubDate>
      
      <guid>https://hxie13.github.io/public/posts/gitlearn/</guid>
      <description>记录Git本地及远程操作和同步命令的使用.</description>
    </item>
    
    <item>
      <title>分类目录</title>
      <link>https://hxie13.github.io/public/pages/about/</link>
      <pubDate>Mon, 10 Sep 2018 19:04:46 +0200</pubDate>
      
      <guid>https://hxie13.github.io/public/pages/about/</guid>
      <description>  Page   Content   123
  </description>
    </item>
    
  </channel>
</rss>
